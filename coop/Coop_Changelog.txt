THE FOLLOWING CODE NEEDS TO BE CHECK BEFORE ANY RELASE

Coop NEW script commands
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
$actor.coop_actorGetType() - Returns actor type inanimate, monster, civilian, enemy, friend, animal, teammate

coop_getStringVariable(varname) - Returns contents of script variable of type string
coop_getVectorVariable(varname) - Returns contents of script variable of type vector
coop_getFloatVariable(varname) - Returns contents of script variable of type float

coop_setStringVariable(varname,value) - Sets contents of script variable of type string
coop_setVectorVariable(varname,value) - Sets contents of script variable of type vector
coop_setFloatVariable(varname,value) - Sets contents of script variable of type float

coop_configstringRemove(text) - Removes configstring containing given value
coop_configstringRemoveCombatSounds(actorname) - Removes configstring combat sounds for given actor name

coop_subString(text,iStart,iLength) - Returns parcial string from text starting at iStart (starts at 0), with length of iLength
coop_toLower(text) - Returns string where letters are turrned all into lower case
coop_toUpper(text; - Returns string where letters are turrned all into upper case
coop_length(text) - Returns length of given string
coop_find(text,find) - Returns location at which find is found inside of text, starts at 0, returns -1 if not found

coop_isDigit(text) - Returns if text is a digit/number

coop_getClassOf($entity) - Returns classname of entity


Coop Mod execution logic:
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
//Executed exclusively only once upon first load of game dll
	extern "C" void G_InitGame( int startTime, int randomSeed )
		CoopManager::Init()
			CoopManager::LoadSettingsFromINI();
			CoopManager::LoadMapListFromINI();


//Executed each time a level is initialised
	G_SpawnEntities(const char * mapname, const char * entities, int levelTime)
		Level::NewMap(const char * temp_mapname, const char * entities, int levelTime)
			Level::SpawnEntities(const char * themapname, const char * entities, int levelTime)
				MultiplayerManager::initMultiplayerGame()
					ModeCoop::init
					
					
//level script - world event
	void World::SetScript( Event *ev )
		CoopManager::LoadLevelScript

//level script - world	
	G_SpawnEntities(const char * mapname, const char * entities, int levelTime)
		Level::NewMap(const char * temp_mapname, const char * entities, int levelTime)
			Level::SpawnEntities(const char * themapname, const char * entities, int levelTime)
				SpawnArgs::Spawn()
					World::_newInstance()
						World::World()
							CoopManager::LoadLevelScript


//Executed each time a level is initialised	- Items
	G_SpawnEntities(const char * mapname, const char * entities, int levelTime)
		Level::NewMap(const char * temp_mapname, const char * entities, int levelTime)
			Level::SpawnEntities(const char * themapname, const char * entities, int levelTime)
				MultiplayerManager::initItems
					ModeCoop::initItems


//Executed each time a level is loaded
	void Level::SpawnEntities( const char *themapname, const char *entities, int levelTime )
		CoopManager::InitWorld()
			CoopManager::DetectMapType()
			CoopManager::LevelStart();
		MultiplayerManager::initMultiplayerGame( void )


//EVENT player spawn
ModeCoop::_giveInitialConditions(Player * player) Zeile 85	C++
	MultiplayerModeBase::ActivatePlayer(Player * player) Zeile 1379	C++
		ModeTeamBase::respawnPlayer(Player * player) Zeile 383	C++
			ModeCoop::_giveInitialConditions


//Executed continuously
 	G_RunFrame(int levelTime, int frameTime)
	 	MultiplayerManager::update(float frameTime)
			MultiplayerModeBase::update(float frameTime)
				//if the match has started
				ModeCoop::isEndOfMatch()
				//during warmup time only
				MultiplayerModeBase::shouldStartMatch()
					ModeCoop::isEndOfMatch()

//Executed continuously	
 	Player::EndFrame(Event * ev)
	 	Player::UpdateStats()
			MultiplayerManager::getInfoIcon(Player * player, int buttons)
				ModeCoop::getInfoIcon(Player * player)

//Executed continuously
	G_ClientThink(gentity_s * ent, usercmd_s * ucmd)
		Listener::ProcessEvent(const Event & event)
			Listener::ProcessEvent(Event * event)
				Player::ClientThink(Event * ev)
					ModeCoop::clientThink
	

//Executed on Listen server
 	G_SpawnEntities(const char * mapname, const char * entities, int levelTime)
		Level::NewMap(const char * temp_mapname, const char * entities, int levelTime)
			Level::SpawnEntities(const char * themapname, const char * entities, int levelTime)
				Player::Player()
					Player::Init()
						MultiplayerManager::addPlayer(Player * player)
							ModeCoop::AddPlayer(Player * player)
								ModeCoop::setupMultiplayerUI(Player* player)


//Player killed
	Player::Killed(Event * ev)
		MultiplayerManager::playerKilled(Player * killedPlayer, Player * attackingPlayer, Entity * inflictor, int meansOfDeath)
			ModeCoop::playerKilled(Player * killedPlayer, Player * attackingPlayer, Entity * inflictor, int meansOfDeath)
			

//Player Model Changed - changing model
 	G_ClientUserinfoChanged(gentity_s * ent, const char * userinfo)
		MultiplayerManager::changePlayerModel(Player * player, const char * modelName, bool force)
			ModeCoop::playerChangedModel
				ModeCoop::updatePlayerSkin
				
//Player Model Changed - Entering the game
 	G_SpawnEntities(const char * mapname, const char * entities, int levelTime)
		Level::NewMap(const char * temp_mapname, const char * entities, int levelTime)
			Level::SpawnEntities(const char * themapname, const char * entities, int levelTime)
				Player::Player()
					Player::Init()
						MultiplayerManager::addPlayer(Player * player)
							ModeCoop::AddPlayer(Player * player)
								ModeCoop::addPlayerToTeam(Player * player, Team * team)
									ModeCoop::updatePlayerSkin(Player * player)


//Player join team
 	Player::joinTeam(Event * ev)
		MultiplayerManager::joinTeam(Player * player, const str & teamName)
			ModeCoop::joinTeam(Player * player, const str & teamName)
				ModeTeamBase::changeTeams(Player * player, Team * team)
					ModeCoop::addPlayerToTeam(Player * player, Team * team)


//Player score - pressing tab or getting killed
 	Player::Score(Event * ev)
		MultiplayerManager::score(Player * player)
			ModeCoop::score(const Player * player)


//Player joining team
 	Player::joinTeam(Event * ev)
		MultiplayerManager::joinTeam(Player * player, const str & teamName)
			ModeCoop::canJoinTeam(Player * player, const str & teamName)


//Player joining team
	G_ConsoleCommand()
		G_ProcessClientCommand(gentity_s * ent)
			Listener::ProcessEvent(Event * event)
				Player::joinTeam(Event * ev)
					MultiplayerManager::joinTeam(Player * player, const str & teamName)
						ModeCoop::joinTeam(Player * player, const str & teamName)
							ModeCoop::canJoinTeam(Player * player, const str & teamName)


//level end
	Level::CleanUp( qboolean temp_restart )
		CoopManager::LevelEndCleanup


//game server ends
	extern "C" void G_ShutdownGame( void )
		CoopManager::LevelEndCleanup


Added File: Coop_Changelog.txt
Added File: base/coop/config/settings.ini
Added File: base/coop/config/maplist.ini
Added File: base/coop/config/playerskins.ini
Added File: base/coop/config/spawninventory.cfg

Added: spawninventory.cfg is used in					@ModeCoop::init
Added: Support for *.script	file extension				@CoopManager::LoadLevelScript
Added: Support for coop/maps/ Level-Script directory	@CoopManager::LoadLevelScript
Disabled: Team Skin Color								@ModeCoop::updatePlayerSkin
Disabled: Team indicator arrow							@ModeCoop::getInfoIcon
Disabled: mp_pointlimit during init						@ModeCoop::init
Disabled: mp_timelimit during init						@ModeCoop::init
				


Changes to stock files
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
dlls\game\actor.cpp
	Added: Event EV_COOP_Actor_GetActorType
	Added: void Actor::COOP_GetActorType(Event* ev) 

dlls\game\program.cpp
    Added: def_t* coop_getDefForVarname(const char* varname);
    Added: const char* coop_getVariableValueAsString(const char* varname);
    Added: Vector coop_getVectorVariableValue(const char* varname);
    Added: float coop_getFloatVariableValue(const char* varname);
    Added: str coop_getStringVariableValue(const char* varname);
    Added: void coop_setVectorVariableValue(const char* varname, Vector vSet);
    Added: void coop_setFloatVariableValue(const char* varname, float fSet);
    Added: void coop_setStringVariableValue(const char* varname, char const* sSet);
	
dlls\game\player.cpp
	Added: #include coop_manager.hpp
	Added: #include coop_gametype.hpp
	void Player::ClientThink( Event *ev )
		Added: ModeCoop::Get().clientThink(this);

dlls\game\g_main.cpp
	extern "C" void G_InitGame
		Added: CoopGame::Init();		
		
dlls\game\level.cpp
	void Level::SpawnEntities
		Added: CoopGame::InitWorld();
		
dlls\game\mp_manager.cpp
	Added: #include coop_manager.hpp
	Added: #include coop_gametype.hpp
	void MultiplayerManager::initMultiplayerGame( void )
		Added: Execution of @ModeCoop::ModeCoop() replacing ModeTeamDeathmatch on Coop maps
	void MultiplayerManager::cleanup( qboolean restart )
		Added: CHECK	_multiplayerGame != &ModeCoop::Get() 
		
dlls\game\mp_modeBase.cpp
	Added: #include coop_manager.hpp
	Added: #include coop_gametype.hpp
	bool MultiplayerModeBase::shouldStartMatch( void )
		

Changes to Coop Mod files
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
coop_manager.cpp
	Added: void Init() - Executed exclusively only once upon first load of game dll
	Added: void InitWorld() - Executed each time a level is loaded
	Added: void DetectMapType() - Executed once upon each level load - populates: coop_MapFlags struct

coop_config.cpp
	Added: CoopSettings::LoadSettingsFromFile
	
coop_generalstrings.hpp
	