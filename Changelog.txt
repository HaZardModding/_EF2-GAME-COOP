Added: File to provide a bridge between the general game code and elite force 2 specific code
bool gameFix_inSingleplayer();
bool gameFix_inMultiplayer();
bool gamefix_isSpectator_stef2(Entity* ent);
bool gameFix_isDead(Entity* ent);
bool gameFix_isDedicatedServer();
bool gameFix_isDedicatedServer();
bool gameFix_isListenServer();
bool gameFix_isWindowsServer();
bool gameFix_isLinuxServer();
void gameFix_hudPrint(Player* player, str sText);
void gameFix_clearArchetypeInfoDisplay(Player* player, Entity* entity);

Changed: Ammo Regeneration ammount given to player, rune was useless in fast paced combat, was 1 new 3 - chrissstrahl
void RuneAmmoRegen::specificUpdate( float frameTime )

IGNORING THE FOLLOWING CODE WARNINGS:
Warning C4996 sscanf: This function or variable may be unsafe. - It is only used in conjunction with float or integer
listener.cpp:888:14: warning: deleting void* is undefined [-Wdelete-incomplete]  ::delete[]( ( void * )event ); - No solution to hadle this right was found

Fixed: Warning: C6053 Due to the previous call to strncpy, the string ? may not be null-terminated.
int NumPlayersOnSameTeam(bot_state_t *bs)
void BotTeamplayReport(void)
void BotUpdateInfoConfigStrings(void)

Fixed: Warning: C6011 Dereferencing NULL-Pointer.
qboolean SensoryPerception::InFOV( const Vector &pos, float check_fov, float check_fovdot	)
int BotAISetupClient(int client, struct bot_settings_s *settings, qboolean restart)

Fixed: Warning: C28182 Dereferencing NULL-Pointer ?, contains same NULL-Value as ?
void BotInterbreedBots(void)
void SelectSpawnPoint( Vector &org, Vector &ang, str &thread )

Fixed: Return value being bool instead of qboolean.
qboolean SensoryPerception::InFOV( const Vector &pos, float check_fov, float check_fovdot	)

The function uses 65556 bytes of stack. Consider moving some data to the heap.
void Com_sprintf (char *dest, int size, const char *fmt, ...)
void str::snprintf( char *dst, int size, const char *fmt, ... )

Fixed: Warning: Possible NULL char
void Q_strncpyz( char *dest, const char *src, int destsize )
char *Q_CleanStr( char *string )
void COM_FileName (const char *in, char *out)

Fixed: C4996 strcpy: This function or variable may be unsafe. Using instead: Q_strncpyz
inline str::str(const char *text)
inline str::str(const str& text)
inline str::str(const float num)
inline str::str(const int num)
inline str::str(const unsigned num)
inline str& str::operator=(const str& text)
inline str& str::operator=(const char *text)
inline void Entity::SetModelEvent(Event *ev)

Fixed: C4996 strcat: This function or variable may be unsafe. Using instead: Q_strcat
inline void str::append(const char *text)
inline void str::append(const str& text)

Fixed: C4996 sprintf: This function or variable may be unsafe. Using instead: snprintf
str operator+( const str& a, const float b )
str operator+( const str& a, const int b )
str operator+( const str& a, const unsigned b )
str& str::operator+=( const float a )
str& str::operator+=( const int a )
str& str::operator+=( const unsigned a )

Fixed: C4996 vsprintf: This function or variable may be unsafe. Using instead: vsnprintf
void CLASS_Print( FILE *class_file, const char *fmt, ... )
void Class::warning( const char *function, const char *fmt, ... )
void Class::error( const char *function, const char *fmt, ... )
void str::snprintf( char *dst, int size, const char *fmt, ... )

Fixed: C4996 sprintf: This function or variable may be unsafe. Using instead: Com_sprintf
inline str::str(const int num)
inline str::str(const unsigned num)
inline str::str(const float num)

Fixed: Warning C4459: declaration of ? hides global definition.
int FindClientByName(char *name)
int FindEnemyByName(bot_state_t *bs, char *name)
int NumPlayersOnSameTeam(bot_state_t *bs)
int BotNumTeamMates(bot_state_t *bs)
int BotSortTeamMatesByBaseTravelTime(bot_state_t *bs, int *teammates, int maxteammates)
void BotTeamOrders(bot_state_t *bs)

Fixed: Warning C26495: The Variable ? was not initialized. A 0ariable needs always to be initialized (type.6)
class Rune : public PowerupBase
class PowerupBase : public Item
class Powerup : public PowerupBase
class RuneAmmoRegen : public Rune
class SensoryPerception 
class TriggerSetVariable : public Trigger
class TriggerPushAny : public Trigger
class TriggerPush : public Trigger
class TriggerPlaySound : public Trigger
class TouchField : public Trigger
class WorkTrigger : public Trigger
class Trigger : public Entity
class TriggerEntryAndExit : public Trigger
class TriggerCallVolume : public Trigger
class TriggerGroupEvent : public Trigger
class TriggerGivePowerup : public Trigger
class TriggerReverb : public Trigger
class TriggerMusic : public Trigger
class TriggerDamageTargets : public Trigger
class TriggerHurt : public TriggerUse
class RandomSpeaker : public TriggerSpeaker
class AwardSystem : public Class
class PathManager : public Listener
class PathNode : public Listener
class PathFinder : public Class
class MovementSubsystem 
class MultiplayerPlayerData
class MultiplayerDialogData
class MultiplayerManager : public Class
class ModifierActionHero : public MultiplayerModifier
class ModifierInstantKill : public MultiplayerModifier
class ModifierControlPoints : public MultiplayerModifier
class PointsPerWeaponData
class HandicapPlayerData
class ModifierSpecialties : public MultiplayerModifier
class ModifierElimination : public MultiplayerModifier
class ModifierDiffusion : public MultiplayerModifier
class LocomotionController
class Lexer
class Item : public Trigger
class HoldPosition : public Behavior
class GotoLiftPosition : public Behavior
class Hibernate : public Behavior
class HelperNode : public Listener
class HealGroupMember : public Behavior
class HeadWatcher
class Hover : public Behavior
class VerticalTakeOff : public Behavior
class FlySplinePath : public Behavior
class FlyClimb : public Behavior
class FlyStrafe : public Behavior
class FindEnemyMovement : public StandardMovement
class FindFleeMovement : public StandardMovement
class FindCoverMovement : public StandardMovement
class GetCloseToEnemy : public Behavior
class CircleCurrentEnemy : public Behavior
class ChaoticDodge : public Behavior
class FlyToNode : public Behavior
class FlyWander : public Behavior
class FlyDescend: public Behavior
class FlyCloseToParent : public Behavior
class FlyCloseToPlayer : public Behavior
class FindEnemy : public Behavior
class FindFlee : public Behavior
class FindCover : public Behavior
class Flee : public Behavior
class GotoPathNode : public Behavior
class FallToDeath : public Behavior
class TorsoWatchEnemy : public Behavior
class TorsoTurn : public Behavior
class EyeWatch : public Behavior
class HeadWatchEnemy : public Behavior
class HeadWatch : public Behavior
class PickupEntity : public Behavior
class RotateToEnemy : public Behavior
class TurnTo : public Behavior
class PickupEnemy : public Behavior
class DragEnemy : public Behavior
class CircleAttack : public Behavior
class ShockDown : public Behavior
class MultiShock : public Behavior
class Shock : public Behavior
class ShockWater : public Behavior
class BurrowAttack : public Behavior
class CircleEnemy : public Behavior
class Turn : public Behavior
class Watch : public Behavior
class Pain : public Behavior
class Idle : public Behavior
class Behavior : public Listener
class HelicopterStrafeAttack : public Behavior
class HelicopterFlyToWaypoint : public Behavior
class HelicopterFlyCircle : public Behavior
class HelicopterFlyToPoint : public Behavior
class FlyCircleAroundWaypoint : public Behavior
class GhostAttack : public Behavior
class TeleportToPosition : public Behavior
class TurnToEnemy : public Behavior
class TurnInvestigate : public Behavior
class Investigate : public Behavior
class RetreatFromEnemy : public Behavior
class GetWithinRangeOfPlayer : public Behavior
class GetCloseToPlayer : public Behavior
class Ammo : public Class
class FlyToPoint : public Behavior
class AimAndMelee : public Behavior
class AimAndShoot : public Behavior
class Aim : public Behavior
class GotoPoint : public Behavior
class CoverCombatWithRangedWeapon : public Behavior
class ModeCaptureTheFlag : public ModeTeamBase
class CtfFlag
class MultiplayerPlayerCtfData
class StringEntry
class GameScriptMarker : public Class
class DamageModifierDamageType : public DamageModifier
class DamageModifierGroup : public DamageModifier
class DamageModifierActorType : public DamageModifier
class DamageModifier : public Class
class Strategos
class __declspec( dllexport ) str
class type_t : public Class
class EventArgDef : public Class
class dfunction_t : public Class
class HorseVehicle : public DrivableVehicle
class Animate : public Listener
class CameraManager : public Listener
class FinishingMove : public Class
class PendingDelta
class Weapon : public Item
class WeaponSetItem : public Class
class WeaponProperty : public Class
class RotateToEntity : public Behavior
class DoBeamAttack : public Behavior
class AlertIdle : public Behavior
class WeaponProperty : public Class
customAnimListEntry_t
class FireWeapon : public Behavior
class WarpToEntity : public Behavior
class WarpToPosition : public Behavior
class Wander : public Behavior
class ThrowEntity : public Behavior
class Talk : public Behavior
class StandardMovement : public Class
class MoveDirectlyToPoint : public Behavior
class GotoSpecified : public Behavior
class GotoWayPoint : public Behavior
class FindMovement : public StandardMovement
Fixed: Warning C4458: declaration of ? hides class member. Renamed to: temp_?
void Level::NewMap( const char *temp_mapname, const char *entities, int levelTime )
PuzzleObject::PuzzleObject()
void Equipment::airStrike(Event *ev)
Player::Player()
void Sentient::MeleeAttackStart( Event *ev )
void SpawnChain::DoSpawn( Event *ev )
void Weapon::Shoot( Event *ev )
void Weapon::AdvancedMeleeAttack(const char* tag1, const char* tag2, bool criticalHit)
void Player::EventUseItem( Event *ev )
void Sentient::DropItemsOnDeath()
painDirection_t Player::Pain_string_to_int( const str &temp_pain )
qboolean Level::inhibitEntity( int temp_spawnflags )
void SplinePath::CreatePath( Event *ev )
void SplinePath::OffsetSpline( Event *ev )
void SplinePath::TurnSpline( Event *ev )
qboolean Entity::CanDamage( const Entity *temp_target, const Entity *skip_ent )
void Entity::FadeNoRemove( Event *ev )
void Entity::FadeIn( Event *ev )
void Entity::Fade( Event *ev )
void Entity::ProjectileAttackEntity( Event *ev )
void GravPathNode::Activate( Event *ev )
void GravPathNode::Deactivate(Event *ev)
void GravPathNode::CreatePath(Event *ev)
void ThrowObject::Throw( const Entity *owner, float speed, const Sentient *targetent, float gravity, float throw_damage )
bool Player::GetProjectileLaunchAngles( Vector &launchAngles, const Vector &launchPoint, const float initialSpeed, const float gravity ) const
void PortalSurface::LocateCamera( Event *ev )
TargetList * World::GetTargetList( const str &temp_targetname, qboolean createnew )
void World::AddTargetEntity( const str &temp_targetname, Entity * ent )
void World::RemoveTargetEntity( const str &temp_targetname, Entity * ent )
Entity * World::GetNextEntity( const str &temp_targetname, Entity * ent )
void Interpreter::CleanupStack( int temp_localstack_used, int oldstacktop )
void Script::Parse( const char *data, int temp_length, const char *name )
void Script::LoadFile( const char *name )
void Spawn::setSpawnKeyValue( Event *ev )
void CameraManager::Load( Event* ev )
void FuncBeam::Shoot( Event *ev )
void DrivableVehicle::Killed(Event *ev)
inline void SoundManager::Archive(Archiver &arc)
void SoundManager::UpdateTriggerMusic( TriggerMusic * music )
void Weapon::SetCHOffset(int temp_chx, int temp_chy)
void CameraManager::DestroyKFCPath( Event* ev )
void Gib::Damage( Event *ev )
void ExplodingWall::Explode( Event *ev )
void ExplodingWall::Explode( Event *ev )
bool UseAnim::GetInformation( const Entity *activator, Vector *org, Vector *temp_angles, str *animation, int *loopcount, str *temp_state, str *temp_camera )
void Player::StartUseAnim( void )
void Player::SetPlayerViewUsingCinematicController( Camera *temp_camera )
void Player::SetPlayerViewUsingActorController( Camera *temp_camera )
int State::addCondition( const char *temp_name, Script &script )
qboolean ScriptVariable::isVariableCommand( const char *temp_name )
qboolean State::setCameraType( const str &ctype )
void State::readMoveType( Script &script )
void Event::Archive( Archiver &arc )
void CameraManager::SavePath( const str& temp_pathName )
void CameraManager::SetPath( const str& temp_pathName )
void Weapon::SetRank( int order, int temp_rank )
void TouchField::Setup( Entity *ownerentity, const Event &touchevent, const Vector &min, const Vector &max, int temp_respondto )
void Level::CleanUp( qboolean temp_restart )
float Camera::CalculateFov( void )
void Vehicle::VehicleTouched( Event *ev )
bool UseAnim::GetInformation( const Entity *activator, Vector *org, Vector *temp_angles, str *animation, int *loopcount, str *temp_state, str *camera )
inline void Entity::Archive( Archiver &arc )

Fixed: Warning C4456: Declaration of ? hides previous local declaration.
void Weapon::Shoot( Event *ev )
void CThread::Spawn( Event *ev )
void Animate::NewAnim( int animnum, bodypart_t part )
void DrivableVehicle::Killed(Event *ev)
void ModifierSpecialties::setupSpecialty( Player *player, SpecialtyType specialty, bool chosen )
void ModeCaptureTheFlag::playerKilled( Player *killedPlayer, Player *attackingPlayer, Entity *inflictor, int meansOfDeath )
bool ModeTeamBase::canJoinTeam( Player *player, const str &teamName )
inline void Weapon::Archive( Archiver &arc )
inline void Player::Archive( Archiver &arc )
void AdaptiveArmor::_UpdateAdaption( int MeansOfDeath , float damage )
void Player::UpdateStats( void )
qboolean PathNode::TestMove( Entity *ent, const Vector &original_start, const Vector &original_end, const Vector &min, const Vector &max, qboolean allowdoors, qboolean fulltest )
void ViewMaster::Spawn( Event *ev )
float BulletAttack( ... )

Fixed: Warning C4459: declaration of program hides global definition.
CThread *ScriptMaster::CreateThread( Program *temp_program )
CThread *ScriptMaster::CreateThread( const char *label, Program *temp_program )

Fixed: Warning C4458: declaration of buffer hides class member. Renamed to: temp_buffer
char *Script::EvaluateMacroString( const char *theMacroString )
void Script::LoadFile( const char *name )

Fixed: Warning C4458: declaration of client hides class member. Renamed to: temp_client
void Camera::Cut( Event* ev )
void TriggerCameraUse::TriggerCamera( Event *ev )
void TriggerReverb::ChangeReverb( Event *ev )
void TriggerReverb::AltChangeReverb( Event *ev )

Fixed: Warning C4458: declaration of hand hides class member. Renamed to: temp_hand
void Weapon::AttachGun( weaponhand_t temp_hand, qboolean holstering )
void Weapon::AttachToHolster( weaponhand_t temp_hand )
void Weapon::AttachToOwner( weaponhand_t temp_hand )
void Equipment::AttachToOwner(weaponhand_t temp_hand)
void WeaponDualWield::AttachToOwner( weaponhand_t temp_hand )

Fixed: Warning C4458: declaration of ent hides class member. Renamed to: temp_ent
void FlySplinePath::Begin(Actor &self)
void ScriptSlave::FollowPath( Event *ev )

Fixed: Warning C4458: declaration of entnum hides class member. Renamed to: temp_entnum
void Player::UpdateStats( void )
int Sentient::GiveAmmo( const str &type, int amount, bool pickedUp, int maxamount )
void Sentient::ListInventory( void )

Fixed: Warning C4458: declaration of edict hides class member. Renamed to: temp_edict
Actor *Player::getBestActorToUse( int *entityList, int count )
bool HoldableItemExplosive::isPlayerInRange( const Vector &position, float maxDistance )

Fixed: Warning C4458: declaration of fov hides class member. Renamed to: temp_fov
Entity* Player::FindHeadTarget( const Vector &temp_origin, const Vector &forward, const float temp_fov, const float maxdist ) 

Fixed: Warning C4459: declaration of level hides global definition.
void Player::SetReverb( int type, float temp_level )
void Player::SetReverb( const str &type, float temp_level )
int Player::AwardPoints(int numPoints)
void TriggerReverb::SetReverb( int type, float temp_level )
void TriggerReverb::SetAltReverb( int type, float temp_level )
void G_Error( int temp_level, const char *fmt, ... )
void Com_Error ( int temp_level, const char *error, ... ) 

Fixed: Warning C4458: declaration of index hides class member. Renamed to: temp_index
Entity * TargetList::GetNextEntity( Entity * ent )

Fixed: Warning C4458: declaration of owner hides class member. Renamed to: temp_owner
void Projectile::Explode( Event *ev )
void Projectile::didDamage( void )
void Weapon::GetActorMuzzlePosition( Vector *position, Vector *forward, Vector *right, Vector *up, const char* tagname )
void Weapon::GetMuzzlePosition( Vector *position, Vector *forward, Vector *right, Vector *up )
void Weapon::Shoot( Event *ev )
void Weapon::SetAimType( Event *ev )
void Weapon::TargetIdleThink( Event *ev )
void Weapon::AdvancedMeleeAttack(const char* tag1, const char* tag2, bool criticalHit)
void ThrowObject::Throw( const Entity *temp_owner, float speed, const Sentient *targetent, float gravity, float throw_damage )
void ThrowObject::Throw( Event *ev )
void GooDebris::Touch( Event *ev )
void GooProjectile::Explode( Event *ev )
void PowerupBase::init( const str &modelName, Sentient *temp_owner )

Fixed: Warning C26495: The Variable _w/_x/_y/_z was not initialized. A Membervariable needs always to be initialized (type.6)
class Quaternion

Fixed: Warning C4459: declaration of p hides global definition.
int BoxOnPlaneSide2 ( const vec3_t emins, const vec3_t emaxs, const struct cplane_s *temp_p )

Fixed: Warning C4458: declaration of origin hides class member. Renamed to: temp_origin
virtual void spawn( const Vector &origin ) {};
inline void Cinematic::Archive(Archiver &arc)
void Cinematic::startAtNamedOrigin( const str &originName, bool callStartThread )
void Cinematic::startAtOrigin( const Vector &temp_origin, float yaw, bool callStartThread )
void Cinematic::handleBeginAtEvent( Event *ev )
void Powerup::spawn( const Vector &temp_origin )
void Rune::spawn( const Vector &temp_origin )
Entity *Entity::SpawnEffect( const str &name, const Vector &temp_origin, const Vector &temp_angles, float removeTime )
Entity* Player::FindHeadTarget( const Vector &temp_origin, const Vector &forward, const float fov, const float maxdist )
void Weapon::WorldHitSpawn( firemode_t mode, const Vector &temp_origin, const Vector &temp_angles, float life )

Fixed: Warning C4458: declaration of angles hides class member. Renamed to: temp_angles
void FuncBeam::setAngles( const Vector &temp_angles )
void Entity::SetControllerAngles(int num,vec3_t temp_angles)
void Entity::SetControllerAngles(Event *ev)
Entity *Entity::SpawnEffect( const str &name, const Vector &origin, const Vector &temp_angles, float removeTime )
void Equipment::airStrike(Event *ev)
bool UseAnim::GetInformation( const Entity *activator, Vector *org, Vector *temp_angles, str *animation, int *loopcount, str *state, str *camera )
Actor *Player::getBestActorToUse( int *entityList, int count )
void Player::turnTowardsEntity( Event *ev )
void ShrapnelBomb::Explode( void )
void Vehicle::SetDriverAngles( const Vector &temp_angles )
void Vehicle::DriverUse( Event *ev )
void HorseVehicle::DriverUse( Event *ev )
void Weapon::WorldHitSpawn( firemode_t mode, const Vector &origin, const Vector &temp_angles, float life )

Fixed: Warning C4458: declaration of angle hides class member. Renamed to: temp_angle
void Door::SetDir( Event *ev )
void SlidingDoor::SetMoveDir( Event *ev )
void ScriptDoor::SetMoveDir( float moveDir )

Fixed: Warning C4457: declaration of ? hides function parameter. Renamed to: temp_?
qboolean MeleeAttack(...)
int MultiplayerModeBase::getStat( Player *player, int statNum, int value )

Fixed: Warning C4458: declaration of thread hides class member. Renamed to: temp_thread
void ScriptSlave::DoMove( Event *ev )

Fixed: Warning C4458: declaration of time hides class member. Renamed to: temp_time
void Level::SetIntermissionAdvanceTime(float temp_time)

Fixed: Warning C4458: declaration of vec hides class member. Renamed to: temp_vec
void ScriptVariable::Var_Vector_Normalize( Event *ev )

Fixed: Warning C4458: declaration of value hides class member. Renamed to: temp_value
void ScriptVariable::setString( const char *temp_value )

Fixed: Warning C4458: declaration of amount hides class member. Renamed to: temp_amount
void Weapon::SetAmmoAmount( int temp_amount, firemode_t mode )
void Weapon::UseAmmo( int temp_amount, firemode_t mode )
void Weapon::DoneReloading( Event *ev )

Fixed: Warning C4458: declaration of ammo hides class member. Renamed to: temp_ammo
void Player::UpdateStats( void )

Fixed: Warning C4458: declaration of activator hides class member. Renamed to: temp_activator
void Trigger::TriggerStuff( Event *ev )

Fixed: Warning C6011 Dereferencing NULL-Pointer.
void Player::ClientThink( Event *ev )
void Player::LevelCleanup( void )
void Player::SetPlayerViewUsingActorController( Camera *camera )
void Entity::quitTeam(void)
void Entity::SetEntNum(int num)
void MultiplayerModeBase::obituary( Player *killedPlayer, Player *attackingPlayer, int meansOfDeath )
void GotoSpecified::setupWarpToPathNode( Actor &self )
Actor* Actor::GetAttachedChildActor( const str& childName )

Fixed: Warning C4389 ==: Conflict between signed and unsigned
void Team::AddPlayer( Player* player )
qboolean Archiver::Read( const char *name, qboolean file_harderror )
void AdaptiveArmor::LoadAdaptionData( const str &name )

Fixed: Warning C4458: declaration of count hides class member. Renamed to: temp_count
inline void ScriptSlave::Archive( Archiver &arc )

Fixed: Warning C4996: strnicmp: The POSIX name for this item is deprecated. Using Q_stricmpn instead.
qboolean Actor::checkpartstate( Conditional &condition )
void Actor::PlayDialog( Sentient *user, float volume, float min_dist, const char *dialog_name, const char *state_name, qboolean headDisplay , bool useTalk , bool important )
const str Actor::FindDialog( Sentient *user, DialogType_t dialogType , const str& context )
bool ModeCaptureTheFlag::shouldKeepItem( MultiplayerItem *item )

Fixed: Warning C4996 strncpy: This function or variable may be unsafe. Using Q_strncpyz instead.
void str::EnsureAlloced( int amount, bool keepold )
void str::snprintf( char *dst, int size, const char *fmt, ... )

Fixed: Warning C4996 strnicmp: The POSIX name for this item is deprecated. Using Q_stricmpn instead.
void ModeCaptureTheFlag::itemKept( MultiplayerItem *item )
void ModeCaptureTheFlag::score( Player *player )
void ModeCaptureTheFlag::returnFlag( MultiplayerItem *item, Player *player )
void ModeCaptureTheFlag::grabTheFlag( Player *player, MultiplayerItem *item )
bool ModeCaptureTheFlag::doesPlayerHaveItem( Player *player, const char *itemName )
int ModeCaptureTheFlag::getStat( Player *player, int statNum, int value )
bool ModifierDestruction::shouldKeepItem( MultiplayerItem *item )
void ModifierDestruction::itemDestroyed( Player *player, MultiplayerItem *item )
bool ModifierOneFlag::checkRule( const char *rule, bool defaultValue, Player *player )
bool ModifierDiffusion::shouldKeepItem( MultiplayerItem *item )
bool ModifierSpecialties::shouldKeepItem( MultiplayerItem *item )
bool ModifierControlPoints::shouldKeepItem( MultiplayerItem *item )
void Entity::setModel( const char *mdl )
void Entity::setViewModel(const char *mdl)
void Entity::MorphEvent(Event *ev)
void Entity::UnmorphEvent(Event *ev)
void Entity::DisplayEffect ( Event *ev )
int modelIndex( const char *mdl )
void G_MissionFailed( const str& reason )
void CThread::SendClientVar( Event *ev )
void ScriptMaster::KillThread( const str &name )
Item *Sentient::FindItemByModelname( const char *mdl, Item *current )
void Sentient::CheckAnimations( Event *ev )
void ViewMaster::SetModelEvent( Event *ev )
Fixed: Warning C4996 stricmp: The POSIX name for this item is deprecated. Using Q_stricmp instead.
void Entity::removeAttachedModelByTargetname( const str &targetNameToRemove )
void Entity::getCustomShaderInfo( const str &customShader, str &shaderName, str &soundName )
void Sentient::EventGiveArmor ( Event *ev )
bool Cinematic::parseCameras( Script &cinematicFile )
bool Cinematic::parseActors( Script &cinematicFile )
int BotAI(int client, float thinktime)
void PostureController::evaluate()
int Event::compareEvents( const void *arg1, const void *arg2 )
void CombatSubsystem::UseActorWeapon(const str &weaponName , weaponhand_t hand )
void ActorThink::ProcessBehaviors( Actor &actor )
void GotoSpecified::SetArgs ( Event *ev)
void GotoLiftPosition::FindNodes(Actor &self )
bool CameraKeyFrame::ParseFrameInfo( int frameNumber, Script& cameraPathFile, float& totalPathTime )
bool CameraKeyFrame::ParseFrameInfoBlock( Script& cameraPathFile, float& totalPathTime )
bool CameraKeyFramePath::ParsePathInfo( Script& cameraPathFile )
bool CameraPath::LoadKeyFramedCameraFile( const str& fileName )
void State::GetLegAnims( Container<const char *> *c )
void State::GetTorsoAnims( Container<const char *> *c )
bool CinematicActor::parse( Script &cinematicFile )
bool CinematicCamera::parse( Script &cinematicFile )
bool CinematicCut::parse( Script &cinematicFile )
bool CinematicOrigin::parse( Script &cinematicFile )
bool Cinematic::load( void )
bool Cinematic::parseObjects( Script &cinematicFile )
bool Cinematic::parseOrigins( Script &cinematicFile )
void Entity::Flags( Event *ev )
void Entity::Effects( Event *ev )
void Entity::RenderEffects( Event *ev )
void Entity::SVFlags(Event *ev)
void Entity::MorphEvent(Event *ev)
int Entity::GetMorphChannel(const char *morph_name)
void Entity::Contents(Event* ev)
void Entity::setMask( Event* ev )
Entity *Entity::SpawnEffect( const str &name, const Vector &temp_origin, const Vector &temp_angles, float removeTime )
void Entity::setMoveType( Event *ev )
void Entity::simplePlayDialog( Event *ev )
void Equipment::airStrike(Event *ev)
qboolean	G_ConsoleCommand( void )
qboolean G_MaskCmd( const gentity_t *ent )
bool Group::IsThisTargetNameInGroup( const str &name )
int ActorGroup::CountMembersWithThisName( const str &name )
HelperNode* HelperNode::FindHighestPriorityNode(  Actor& self , const str& customType  )
HelperNode* HelperNode::FindHighestPriorityNode(  Actor& self , const str& customType , const str &targetedTo  )
void Level::Precache( void )
qboolean Player::checkuseweapon( Conditional &condition )
const str Player::getPainShader( const char *MODName )
void Player::loadUseItem( const str &item )
void Player::forceMoveType( Event *ev )
def_t *Program::GetDef( type_t *type, const char *name, def_t *scope, bool allocate, Lexer *lex )
void DefaultStrategos::SetBehaviorPackage( const str &packageName )
int PackageManager::GetPackageIndex( const str &packageName )
void Personality::Archive( Archiver &arc )
qboolean Script::GetBoolean( qboolean crossline )
void ScriptMaster::KillThread( const str &name )
void Sentient::FireWeapon( Event *ev )
void Sentient::StopFireWeapon( Event *ev )
void Sentient::ReleaseFireWeapon( Event *ev )
int Sentient::GiveAmmo( const str &type, int amount, bool pickedUp, int maxamount )
void Sentient::CheckAnimations( Event *ev )
qboolean Weapon::UnlimitedAmmo( firemode_t mode )
void Weapon::DoneFiring( Event *ev )
void Weapon::SetHand( Event *ev )
void Actor::SetDialogMode( Event *ev )
qboolean Actor::checkpartflag( Conditional &condition )
qboolean Actor::checkVar( Conditional &condition )
qboolean Actor::checkVarTimeDifference( Conditional &condition )
qboolean Actor::DialogExists( const str &aliasName	)
void Actor::AddDialogParms( DialogNode_t *dialog_node, Event *ev )
void Actor::PlayDialog(	Event *ev )
void Actor::SetVar( Event *ev	)
void Actor::SetVarTime( Event *ev )
void Actor::UseActorWeapon( Event *ev )
void Actor::InContext( const str &theContext , bool useDefaultMinDist )
qboolean Actor::checkGroupMememberRange( Conditional &condition )
void Actor::SetBehaviorPackage( const str &packageName )
Actor* Actor::GetAttachedChildActor( const str& childName )
const str Actor::FindDialog( Sentient *user, DialogType_t dialogType , const str& context )
void Actor::AddCustomThread( const str& threadType , const str& threadName )
bool Actor::HaveCustomThread( const str& threadType )
void Actor::RunCustomThread( const str& threadType )
const str Actor::GetCustomThread( const str& threadType )
int World::findBrokenThing( const char *name )
int World::worldPhysicsVarNameToIndex( const char *varName )
void PuzzleObject::useEvent(Event* event)
bool ModifierDestruction::shouldKeepItem( MultiplayerItem *item )
void AwardSystem::playerEventNotification( const char *eventName, const char *eventItemName, Player *eventPlayer )
void MultiplayerManager::callVote( Player *player, const str &command, const str &arg )
bool MultiplayerManager::isValidPlayerModel( Player *player, str modelToUse )
void MultiplayerManager::joinTeam( Player *player, const str &teamName )
bool MultiplayerModeBase::parseConfigToken( const char *key, Script *buffer )
bool ModeCaptureTheFlag::shouldKeepItem( MultiplayerItem *item )
bool ModeCaptureTheFlag::checkGameType( const char *gameType )
bool ModeDeathmatch::checkGameType( const char *gameType )
bool ModeDeathmatch::checkRule( const char *rule, bool defaultValue, Player *player )
Entity *ModeTeamBase::getSpawnPoint( Player *player )
Team* ModeTeamBase::_findTeamByName( const str& teamName )
bool ModeTeamDeathmatch::checkGameType( const char *gameType )
bool ModifierInstantKill::checkRule( const char *rule, bool defaultValue, Player *player )
void ModifierDestruction::itemDestroyed( Player *player, MultiplayerItem *item )
void ModifierDestruction::itemUsed( Entity *entity, MultiplayerItem *item )
bool ModifierDestruction::checkRule( const char *rule, bool defaultValue, Player *player )
bool ModifierDestruction::checkGameType( const char *gameType )
bool ModifierOneFlag::shouldKeepItem( MultiplayerItem *item )
bool ModifierOneFlag::checkRule( const char *rule, bool defaultValue, Player *player )
bool ModifierOneFlag::checkRule( const char *rule, bool defaultValue, Player *player )
bool ModifierOneFlag::checkGameType( const char *gameType )
bool ModifierElimination::checkRule( const char *rule, bool defaultValue, Player *player )
void ModifierElimination::update( float frameTime )
void ModifierDiffusion::playerEventNotification( const char *eventName, const char *eventItemName, Player *eventPlayer )
bool ModifierDiffusion::checkRule( const char *rule, bool defaultValue, Player *player )
bool ModifierDiffusion::shouldKeepItem( MultiplayerItem *item )
void ModifierDiffusion::itemUsed( Entity *entity, MultiplayerItem *item )
void ModifierDiffusion::playerCommand( Player *player, const char *command, const char *parm )
bool ModifierSpecialties::checkRule( const char *rule, bool defaultValue, Player *player )
void ModifierSpecialties::playerCommand( Player *player, const char *command, const char *parm )
void ModifierSpecialties::itemTouched( Player *player, MultiplayerItem *item )
void ModifierSpecialties::playerUsed( Player *usedPlayer, Player *usingPlayer, Equipment *equipment )
bool ModifierControlPoints::checkRule( const char *rule, bool defaultValue, Player *player )
bool ModifierPointsPerWeapon::parseConfigToken( const char *key, Script *buffer )
int ModifierPointsPerWeapon::getPointsForKill( Player *killedPlayer, Player *attackingPlayer, Entity *inflictor, int meansOfDeath, int points )
void AwardSystem::awardTeamAward( AfterMatchTeamAwardType teamAward, const char *teamName )
bool ModeCaptureTheFlag::doesPlayerHaveItem( Player *player, const char *itemName )
void ModeCaptureTheFlag::playerEventNotification( const char *eventName, const char *eventItemName, Player *eventPlayer )
void ModifierDestruction::itemDestroyed( Player *player, MultiplayerItem *item )
void ModeCaptureTheFlag::returnFlag( MultiplayerItem *item, Player *player )

Fixed: Warning: C4996 strcmpi: The POSIX name for this item is deprecated. Using instead: Q_stricmp
int PlayerStat_NameToNum( const char *name )
int EAXMode_NameToNum( const char * name )
int MusicMood_NameToNum( const char * name )
void Entity::SurfaceCommand(const char * surf_name,const char * token)
void Entity::Shader(Event *ev)
ClassDef *SpawnArgs::getClassDef( qboolean *tikiWasStatic )
void PathManager::SetNodeFlagsEvent( Event *ev )
void ScriptSlave::FollowPath( Event *ev )

Fixed: Warning lnt-logical-bitwise-mismatch
inline void TriggerPlaySound::Archive(Archiver &arc)
void TriggerSetVariable::SetVariable( Event *ev )
qboolean Player::checkatdoor( Conditional &condition )
qboolean Player::checkputawayleft( Conditional &condition )
qboolean Player::checkputawayright( Conditional &condition )
qboolean Player::checkputawayboth( Conditional &condition )
qboolean Player::checkstatename( Conditional &condition )
void Player::GibEvent( Event *ev )
qboolean Player::LargeShieldActive( void )
extern "C" void G_RunFrame( int levelTime, int frameTime )
qboolean Actor::checkcanseeenemy( Conditional &condition )
qboolean Actor::checkcanseeplayer( Conditional &condition )
qboolean Actor::CanJump( void )
qboolean Actor::checkdone ( Conditional &condition )
qboolean Actor::checkpartdead( Conditional &condition )
qboolean Actor::checkenemyranged( Conditional &condition )
qboolean Actor::checkplayerranged()

Fixed: Warning C4458: declaration of mode hides class member. Renamed to: temp_mode
void Actor::SetTalkWatchMode( Event *ev )

Fixed: Warning C4458: declaration of currentState hides class member. Renamed to: temp_currentState
void Actor::_printDebugInfo(const str &laststate , const str &temp_currentState , const str &legAnim , const str &torsoAnim )

Fixed: Warning C4458: declaration of gravity hides class member. Renamed to: temp_gravity
void Actor::TossThrowObject( Event *ev	)
void World::Think( void )
bool Player::GetProjectileLaunchAngles( Vector &launchAngles, const Vector &launchPoint, const float initialSpeed, const float temp_gravity ) const
void ThrowObject::Throw( const Entity *temp_owner, float speed, const Sentient *targetent, float temp_gravity, float throw_damage )

Fixed: Warning C4458: declaration of command hides class member. Renamed to: temp_command
void Actor::SendCommand( Event *ev )

Fixed: Warning C4458: declaration of angles hides class member. Renamed to: temp_angles
void Actor::MeleeEvent( Event *ev )
qboolean Actor::checkForwardDirectionClear(float dist)
qboolean Actor::checkRearDirectionClear(float dist)
qboolean Actor::checkLeftDirectionClear(float dist)
qboolean Actor::checkRightDirectionClear(float dist)

Fixed: Warning C4458: declaration of flags hides class member. Renamed to: temp_flags
void Actor::SetActorFlag( int flag, qboolean flag_value )
qboolean Actor::GetActorFlag( int flag ) const
void Actor::SetNotifyFlag( int flag, qboolean flag_value )
qboolean Actor::GetNotifyFlag( int flag )

Fixed: Warning C4458: declaration of part_name hides class member. Renamed to: temp_part_name
qboolean Actor::checkpartstate( Conditional &condition )
qboolean Actor::checkpartflag( Conditional &condition )
qboolean Actor::checkpartdead( Conditional &condition )

Fixed: Warning C4458: declaration of name hides class member. Renamed to: weaponNameOfPlayer
qboolean Actor::checkPlayerWeaponNamed( const str& weaponNameOfPlayer )

Fixed: Warning C4458: declaration of name hides class member. Renamed to: weaponNameOfEnemy
qboolean Actor::checkEnemyWeaponNamed( const str& weaponNameOfEnemy )

Fixed: Warning C4458: declaration of name hides class member. Renamed to: nameOfPart
Actor *Actor::FindPartActor( const char *nameOfPart )

Fixed: Warning C4458: declaration of name hides class member. Renamed to: weaponName
qboolean Actor::checkUsingWeaponNamed ( const str &weaponName )

Fixed: Warning C4458: declaration of name hides class member. Renamed to: nameOfOther
void Actor::IfNearEvent( Event *ev )

Fixed: Warning C4458: declaration of target hides class member. Renamed to: targetVec
qboolean Actor::GetClosestTag( const str &tag_name, int number_of_tags, const Vector &targetVec, Vector *orig )

Fixed: Warning C4458: declaration of target hides class member. Renamed to: targetEntity
void Actor::AttackEntity( Event *ev	)

Fixed: Warning C4458: declaration of target hides class member. Renamed to: targetTrigger
qboolean Actor::_isWorkNodeValid( PathNode *node )

Fixed: Warning C4459: declaration of skill hides global definition.
void G_AddRandomBot( int team ) 
static void G_AddBot( char *name, float skill, const char *team, const char *specialty, char *altname)
void SV_AddBot_f( void )
static void G_SpawnBots( char *botList, int baseDelay )
void Player::setSkill( int temp_skill )

Fixed: Warning C4458: declaration of ptr hides class member.
inline void SafePtrBase::AddReference(Class *ptr) -> inline void SafePtrBase::AddReference(Class *temp_ptr)
inline void SafePtrBase::RemoveReference(Class *ptr) -> inline void SafePtrBase::RemoveReference(Class *temp_ptr)

Changed: Moved int inside its for loop.
inline str::str(const str text,int start,int end)

Fixed: warning C4365: =: conversion from size_t to int, signed/unsigned mismatch.
inline str::str(const char *text)
inline str::str(const float num)
inline str::str(const int num)
inline str::str(const unsigned num)
inline void str::append(const char *text)
inline str& str::operator=(const char *text)

Added: Suppression of warnings on windows for sscanf, strcpy, strcat
q_shared.h -> #define _CRT_SECURE_NO_WARNINGS

Fixed: warning C4619: #pragma-Warning: The Warning "4136" does not exist
q_shared.h -> #pragma warning(disable : 4136)  -> //#pragma warning(disable : 4136) 

Fixed: warning: passing NULL to non-pointer argument 1 of str::str(int) [-Wconversion-null]
static str heuristicFileName=NULL; -> static str heuristicFileName = "";

Fixed: warning: typedef was ignored in this declaration
typedef enum StringType { GLOBAL, LEVEL }; -> enum class StringType { GLOBAL, LEVEL };

Fixed: warning: ISO C++ forbids converting a string constant to char * [-Wwrite - strings]
void Lexer::Expect( char *string ) -> void Lexer::Expect( const char *string )

Fixed: warning: ISO C++ forbids converting a string constant to char * [-Wwrite - strings]
void QDECL BotAI_BotInitialChat( bot_state_t *bs,char *type, ... ) -> void QDECL BotAI_BotInitialChat( bot_state_t *bs,const char *type, ... )
char *BotRandomWeaponName(void) -> static const char *BotRandomWeaponName(void)
float BotNearestVisibleItem(bot_state_t *bs, char *itemname, bot_goal_t *goal) -> float BotNearestVisibleItem(bot_state_t *bs, const char *itemname, bot_goal_t *goal)
void BotMatch_WhereAreYou(bot_state_t *bs, bot_match_t *match)  -> char *nearbyitems -> const char *nearbyitems
void BotRecordNodeSwitch(bot_state_t *bs, char *node, char *str, char *s) -> void BotRecordNodeSwitch(bot_state_t *bs, const char *node, const char *str, const char *s)
void AIEnter_Intermission(bot_state_t *bs, char *s) -> void AIEnter_Intermission(bot_state_t *bs, const char *s)
void AIEnter_Observer(bot_state_t *bs, char *s) -> void AIEnter_Observer(bot_state_t *bs, const char *s)
void AIEnter_Stand(bot_state_t *bs, char *s) -> void AIEnter_Stand(bot_state_t *bs, const char *s)
void AIEnter_Respawn(bot_state_t *bs, char *s) -> void AIEnter_Respawn(bot_state_t *bs, const char *s)
void AIEnter_Seek_ActivateEntity(bot_state_t *bs, char *s) -> void AIEnter_Seek_ActivateEntity(bot_state_t *bs, const char *s)
void AIEnter_Seek_NBG(bot_state_t *bs, char *s) -> void AIEnter_Seek_NBG(bot_state_t *bs, const char *s)
void AIEnter_Seek_LTG(bot_state_t *bs, char *s) -> void AIEnter_Seek_LTG(bot_state_t *bs, const char *s)
void AIEnter_Battle_Fight(bot_state_t *bs, char *s) -> void AIEnter_Battle_Fight(bot_state_t *bs, const char *s)
void AIEnter_Battle_SuicidalFight(bot_state_t *bs, char *s)  -> void AIEnter_Battle_SuicidalFight(bot_state_t *bs, const char *s) 
void AIEnter_Battle_Chase(bot_state_t *bs, char *s) -> void AIEnter_Battle_Chase(bot_state_t *bs, const char *s)
void AIEnter_Battle_Retreat(bot_state_t *bs, char *s) -> void AIEnter_Battle_Retreat(bot_state_t *bs, const char *s)
void AIEnter_Battle_NBG(bot_state_t *bs, char *s) -> void AIEnter_Battle_NBG(bot_state_t *bs, const char *s)
void BotSetEntityNumForGoal(bot_goal_t *goal, char *classname) -> void BotSetEntityNumForGoal(bot_goal_t *goal, const char *classname)
void BotSetUserInfo(bot_state_t *bs, char *key, char *value) -> void BotSetUserInfo(bot_state_t *bs, const char *key, const char *value)
char *ClientName(int client, char *name, int size) -> handling of "[client out of range]"
char *ClientSkin(int client, char *skin, int size) -> handling of "[client out of range]"
void BotDontAvoid(bot_state_t *bs, char *itemname) -> void BotDontAvoid(bot_state_t *bs, const char *itemname)
void QDECL BotAI_Print(int type, char *fmt, ...) -> void QDECL BotAI_Print(int type, const char *fmt, ...)
void BotReportStatus(bot_state_t *bs) -> char *leader
void BotSetInfoConfigString(bot_state_t *bs) -> char *leader
void BotVoiceChat(bot_state_t *bs, int toclient, char *voicechat) -> void BotVoiceChat(bot_state_t *bs, int toclient, const char *voicechat)
void BotVoiceChatOnly(bot_state_t *bs, int toclient, char *voicechat) -> void BotVoiceChatOnly(bot_state_t *bs, int toclient, const char *voicechat)
void BotSayVoiceTeamOrder(bot_state_t *bs, int toclient, const char *voicechat) -> void BotSayVoiceTeamOrder(bot_state_t *bs, int toclient, const char *voicechat)
int (*AAS_ValueForBSPEpairKey)(int ent, char *key, char *value, int size); -> int (*AAS_ValueForBSPEpairKey)(int ent, const char *key, char *value, int size);
int (*AAS_VectorForBSPEpairKey)(int ent, char *key, vec3_t v); -> int (*AAS_VectorForBSPEpairKey)(int ent, const char *key, vec3_t v);
int (*AAS_FloatForBSPEpairKey)(int ent, char *key, float *value); -> int (*AAS_FloatForBSPEpairKey)(int ent, const char *key, float *value);
int (*AAS_IntForBSPEpairKey)(int ent, char *key, int *value); -> int (*AAS_IntForBSPEpairKey)(int ent, const char *key, int *value);
int (*BotLibVarSet)( char *var_name, char *value); -> int (*BotLibVarSet)(const char *var_name, const char *value);
int (*BotLibVarGet)( char *var_name, char *value, int size); -> int (*BotLibVarGet)(const char *var_name, char *value, int size);
static void G_LoadArenasFromFile( char *filename ) -> static void G_LoadArenasFromFile( const char *filename )
void G_AddRandomBot( int team ) -> char* teamstr
static void G_AddBot( char *name, float skill, const char *team, const char *specialty, char *altname) -> char *key
static void G_LoadBotsFromFile( char *filename ) -> static void G_LoadBotsFromFile( const char *filename )
void (*EA_SayTeam)(int client, char *str); -> void (*EA_SayTeam)(int client, const char *str);
void (*BotInitialChat)(int chatstate, char *type, int mcontext, char *var0, char *var1, char *var2, char *var3, char *var4, char *var5, char *var6, char *var7) -> void	(*BotInitialChat)(int chatstate, const char *type, int mcontext, const char *var0, const char *var1, const char *var2, const char *var3, const char *var4, const char *var5, const char *var6, const char *var7)
int (*BotNumInitialChats)(int chatstate, char *type) -> int (*BotNumInitialChats)(int chatstate, const char *type);
int (*BotGetLevelItemGoal)(int index, char *classname, struct bot_goal_s *goal) -> int (*BotGetLevelItemGoal)(int index, const char *classname, struct bot_goal_s *goal)

Fixed: warning: converting to non-pointer type int from NULL [-Wconversion-null]
void G_FadeSound( float delaytime )
consolecmd_t G_ConsoleCmds[]
static qboolean StringToFilter( const char *s, ipfilter_t *f )
void SVCmd_AddIP_f( void )
void SVCmd_RemoveIP_f( void )
void SVCmd_ListIP_f( void )
void SVCmd_WriteIP_f( void )
ThrowObject::ThrowObject()
static fileHandle_t logfile
static void OpenPlayerLogFile( void )
void ClosePlayerLogFile( void )
static fileHandle_t heuristicFile
void PlayerHeuristics::ClosePlayerHeuristicFile()
qboolean Item::Pickupable( Entity *other )
qboolean Weapon::Pickupable( Entity *other )

Fixed: gameplaydatabase.h:36:1: warning: typedef was ignored -> changed to class to be more type-safe
void GameplayProperty::Archive(Archiver &arc)
gameplaydatabase.h -> typedef enum GameplayValueType
gameplaydatabase.h -> class PendingDelta
void GameplayManager::processPendingMessages( void )
void GameplayProperty::Archive(Archiver &arc)
void GameplayDatabase::Archive(Archiver &arc)
bool GameplayProperty::parseProperty(Parser &gameplayFile, const str& type)

Disabled: Checking passwords for bots (by daggo)
static void G_AddBot( char *name, float skill, const char *team, const char *specialty, char *altname)

Added: Cvar local_language to gamecode logic
void CVAR_Init( void )

Added: Function retrieving Server Language
str gameFix_getServerLanguage();

Added: Function retrieving Player Language
str gameFix_getLanguage(Player* player);

Added: Detection of Player local_language cvar, for Eng/Deu Language detection
extern "C" void G_ClientBegin( gentity_t *ent, const usercmd_t *cmd )

Added: Function that allows Language selection English
qboolean gameFix_languageEng(const gentity_t* ent)

Added: Function that allows Language selection German
qboolean gameFix_languageDeu(const gentity_t* ent)

Added: Commands for german/english Language detection - G_ConsoleCmds
consolecmd_t G_ConsoleCmds[] - gamecmds.cpp

Fixed: ScriptSkyOrigin::Think crashing with certain commands if no player present - baseposition, playerbaseposition, translationmult, maxtranslationdist
void ScriptSkyOrigin::Think( void )

Added: Function that returns any player preferably not dead or spectator
Player* gamefix_getAnyPlayerPreferably()
Player* gamefix_getAnyPlayerPreferably(bool noDead,bool noSpectator)

Added: Players get targetnames with their client-ID attached in multiplayer
Player::Player()

Added: Allow SKILL cvar to be changed on the fly
void CVAR_Init( void )
void MultiplayerManager::checkModifiedCvars( bool informPlayers ) - Multiplayer
void World::Think( void ) - Singleplayer

Added: Information we want to presist over level changes and restarts
extern "C" const char *G_ClientConnect( int clientNum, qboolean firstTime, qboolean isBot, qboolean checkPassword )
extern "C" void G_ClientDisconnect( gentity_t *ent )
glocal.h added struct gamefix_client_persistant_s

Added: Function to return interger value from cVar
int gamefix_getCvarInt(str cvarName)

Added: Function to return float value from cVar
float gamefix_getCvarFloat(str cvarName)

Added: Function to return string value from cVar - chrissstrahl
str gamefix_getCvar(str cvarName)

Added: Function to check if player is a BOT, gameFix_isBot
bool gameFix_isBot(Player* player)

Added: Function to get player that is inside of the given entity boundingbox
Player* gamefix_getPlayerInsideOfEntity(Entity* eTheBox)

Fixed: Trigger always refering to client 0
void TriggerCallVolume::_notifyRequiredEnts(bool inCallVolume )
void TriggerCallVolume::CheckReady( Event *ev )

Fixed: trigger_volume_callvolume set activating player as activator
void TriggerCallVolume::TriggerStuff( Event *ev )

Fixed: trigger_volume_callvolume targetname not being cleared from Player when leaving trigger
TriggerCallVolume::EntityLeftVolume
void TriggerCallVolume::_notifyRequiredEnts(bool inCallVolume )

Added: Additional information being printed out on failure of $cam.follow($entity)
void Camera::FollowEvent( Event* ev )

Fixed: GotoLiftPosition::FindNodes always refering to client 0
void GotoLiftPosition::FindNodes(Actor &self )

Fixed: Archetype cleared, regardless if other players are targeting the given entity
void Player::Killed( Event *ev )

Fixed: Archetype still showing as targeted when player enters spectator, related to Player::ProcessTargetedEntity
void Player::InitView( void )

Fixed: Spectators being able to show/trigger Archetypes
void Player::ProcessTargetedEntity( void )

Fixed Server Commands regarding the IP-Bann List: addip, removeip, listip, writeip

Added: G_ServerCommand returning bool if command was recognized
void G_ServerCommand( void ) -> bool G_ServerCommand( void )

Added: addip info print out that IP was added to bann list
void SVCmd_AddIP_f( void )

Disabled: Unknown server command, print out, we handle it as chat text anyway
void G_ServerCommand( void )

Changed: Server commands no longer using sv prefix before command
void SVCmd_AddIP_f( void )
void SVCmd_RemoveIP_f( void )
void SVCmd_WriteIP_f( void )
bool G_ServerCommand( void 

Added: removeip command printing out the IP that was removed
void SVCmd_RemoveIP_f( void )

Added: Printout of Number of banned IPs in list
void SVCmd_ListIP_f( void )

Fixed: Writing of banned IP-List to a file
void SVCmd_WriteIP_f( void )

Disabled: Fakk2 relic, secret thread
TriggerSecret::TriggerSecret()

Added: info_player_start Singleplayer Spawn being used if no other is found on a map - allows to spawn on Singleplayer maps
void ModeDeathmatch::respawnPlayer( Player *player )
void ModeDeathmatch::AddPlayer( Player *player )
void ModeTeamBase::addPlayerToTeam( Player *player, Team *team )
void ModeTeamBase::respawnPlayer( Player *player )
bool HoldableItemTransporter::use( void )

Added: Function used to check if entity is inside boundingbox of other-entity
bool gamefix_checkEntityInsideOfEntity(Entity* eCheck, Entity* eTheBox)

Added: Print out on triggerEntity command failure for feedback
void CThread::TriggerEntityEvent( Event *ev )

Fixed: Crash if given entity did not exist - triggerEntity script command
void CThread::TriggerEntityEvent( Event *ev )

Fixed: Crash if client 0 does not exist
void Actor::SpawnItems( void )

Added: Multiplayer compatibility for Camera Fov
void Camera::SetFOV( float fov, float time )

Fixed: Crash if Client 0 is missing while Camera Fov is set
void Camera::SetFOV( float fov, float time )

Fixed: sv_maxclient > 1 having a impact on script console commands in Singleplayer
qboolean G_ProcessClientCommand( gentity_t *ent )

Added: Convince Feature to strip leading /,^ or \ from console commands
void G_ClientCommand( gentity_t *ent )

Added: Check if it is a valid server command, because it would otherwise print out commands send to server at G_ProcessClientCommand
qboolean	G_ConsoleCommand( void )

Fixed: Savegames getting created during Multiplayer
qboolean G_ArchiveLevel( const char *filename, qboolean autosave, qboolean loading )

Added: Print out to all player huds/chat in multiplayer if trigger_secret is triggered
void TriggerSecret::FoundSecret( Event *ev )

Fixed: Crash in multiplayer if client 0 is not present and trigger_secret is triggered
void TriggerSecret::FoundSecret( Event *ev )

Fixed: Activator not being set on entry event for trigger_EntryAndExit
void TriggerEntryAndExit::TriggerStuff( Event *ev )

Added: Make player view from the current camera during cinematic, when just entering or switching around
void G_StopCinematic( void )
void SetCamera( Entity* ent, float switchTime )
void CThread::CuePlayer( Event *ev )
class MultiplayerManager : public Class
MultiplayerManager::MultiplayerManager()
void MultiplayerManager::cleanup( qboolean restart )
void MultiplayerManager::playerEnterArena( int entnum, float health )
void MultiplayerManager::makePlayerSpectator( Player *player, SpectatorTypes spectatorType, bool byChoice )

Fixed: First map in the map list repeating on linux servers
str MultiplayerManager::getNextMap( void )

Fixed: Dynamic lights appearing off if they have switched on before the player was in game
MultiplayerManager::MultiplayerManager()
void MultiplayerManager::addPlayer( Player *player )
void MultiplayerManager::cleanup( qboolean restart )
void World::UpdateDynamicLights( void )

Added: GAMEFIX identification string printout with Compile date
extern "C" void G_InitGame( int startTime, int randomSeed )

Added: Disallowed Playername "server"
extern "C" void G_ClientUserinfoChanged( gentity_t *ent, const char *userinfo )

Fixed: MP-Taunt Cooldown, the variable was there but nothing was implemented
qboolean G_TauntCmd( const gentity_t *ent )

Added: Turn OFF LEVEL AI if server empty, prevent issues with ai - turns on if player connects
extern "C" void G_ClientDisconnect( gentity_t *ent )
extern "C" const char *G_ClientConnect( int clientNum, qboolean firstTime, qboolean isBot, qboolean checkPassword )

Fixed: Bad null terminator
void ParseMapName( const char *fullName, char *mapName, char *spawnposName, char *movieName )

Fixed: Crash if a error is thrown before a level is loadad -> returns nullptr on failure
Player *GetPlayer( int index )

Added: Multiplayer handling for StopDialog
void Actor::StopDialog()

Fixed: Crash if $actor.attack($entity) is used but $entity does not exist
void Actor::AttackEntity( Event *ev	)

Added: Print info of mission failure to player huds
void G_FinishMissionFailed( void )

Fixed: Crash if client 0 does not exist
void G_FinishMissionFailed( void )

Fixed: Crash if owner does not exist
void SplinePath::SetPrev( SplinePath *node )

Fixed: crash after success screen is done, if no map key is set on trigger_changelevel in singleplayer
void G_ExitLevel( void )

Fixed: Missing .c_str()
void G_BeginIntermission( const char *map )

Fixed: trigger_hurt crash if activating entity was just deleted in this frame
void TriggerHurt::Hurt( Event *ev )

Fixed: trigger_hurt only hurting the activator, even when multiple players/actors are inside the triggerfield
void TriggerHurt::Hurt( Event *ev )

Added: Cap on integer digit length to prevent crash and set correct return type
void CThread::GetIntegerFromString( Event *ev )

Added: Automatic loading of localstrings for each map (if not set in leveldefs.txt)
Example file location: loc/deu/stringresource/mapname.loc AND loc/eng/stringresource/mapname.loc
void Level::loadLevelStrings( void )

Added: Player Taunts not playing during cinematic
qboolean G_TauntCmd( const gentity_t *ent )

Added: Made Message print out multiplayer compatible if activator is a camera
void Trigger::ActivateTargets( Event *ev )

Added: Print out of (key)Message to of activating player hud for multiplayer
void Trigger::ActivateTargets( Event *ev )

Added: Print out of (key)Message to hud for multiplayer
void Trigger::ActivateTargets( Event *ev )

Changed: importance of (key)Message to high
void Trigger::ActivateTargets( Event *ev )

Added: Print Message to hud in multiplayer
Door::TryOpen

Fixed: game. variable cut off by one letter
void CThread::SetFloatVar( Event *ev )
void CThread::SetVectorVar( Event *ev )
void CThread::SetStringVar( Event *ev )
void CThread::RemoveVariable( Event* ev )
void CThread::GetFloatVar( Event *ev )
void CThread::GetVectorVar( Event *ev )
void CThread::GetStringVar( Event *ev )
void CThread::doesVarExist( Event *ev )

Fixed: Basher crashing linux server when rotating, on windows sometimes Basher was randomly doing several 180 turns
RotateToEntity::RotateToEntity()

Fixed: game. Variables where cut off by one letter when set or read or checked, they still did "work"
void CThread::GetFloatVar( Event *ev )
void CThread::GetVectorVar( Event *ev )
void CThread::GetStringVar( Event *ev )
void CThread::SetFloatVar( Event *ev )
void CThread::SetVectorVar( Event *ev )
void CThread::SetStringVar( Event *ev )
void CThread::RemoveVariable( Event* ev )
void CThread::doesVarExist( Event *ev )

Added: info printouts to hud/chat for multiplayer
void Trigger::TriggerStuff( Event *ev )

Added: info printouts to hud/chat for multiplayer
Door::TryOpen( Event *ev )


Fixed: Dispenser checking distance for all players not just client 0
void Dispenser::Think( void )

Added: check if item exists in game for puzzleobject
void PuzzleObject::useEvent(Event* event)

Fixed: Puzzleobject checking distance for all players not just client 0
void PuzzleObject::Think( void )

Fixed: Kill not always working under various conditions
void Player::Kill( Event *ev )

Fixed: kill working during cinematic/spectator or if already dead
void Player::Kill( Event *ev )

Changed: Importance from normal to critical
void CThread::CPrint( Event *ev )
CThread::CenterPrint( Event *ev )

Fixed: show to all players not just client 0
void CThread::CPrint( Event *ev )

Fixed: printouts working on one OS but not the other windows/linux 
extern "C" void G_CleanupGame( qboolean restart )
extern "C" void G_ShutdownGame( void )
extern "C" void G_InitGame( int startTime, int randomSeed )
void CThread::Print( Event *ev )
void CThread::PrintInt( Event *ev )
void CThread::PrintFloat( Event *ev )
void CThread::PrintVector( Event *ev )
void CThread::NewLine( Event *ev )

Fixed: checking players by their class to prevent issues if player get re-targetnamed
void DamageModifierTargetName::resolveDamage(Damage &damage)

Fixed: mp_bigGunMode also applying in singleplayer 
void Weapon::AttachGun( weaponhand_t hand, qboolean holstering )

Changed: changed error message to spell out the object type 
void SelectSpawnPoint( Vector &org, Vector &ang, str &thread )

Fixed: Server rejecting players with a password set, when the server it self has currently no password set
extern "C" const char *G_ClientConnect

Fixed: crash when using fakeplayer script command in multiplayer
void CThread::FakePlayer( Event *ev )
void CThread::RemoveFakePlayer( Event *ev )
void Player::StartFakePlayer( void )
void Player::FakePlayer( qboolean holster )
void Player::RemoveFakePlayer( void )

Fixed: chrash if entity does not exist
CThread::SendClientCommand( Event *ev )

Fixed: chrash if entity does not exist
void CThread::GetNumFreeReliableServerCommands( Event* ev )

Fixed: Bat'leth / Batleth stabbing sound being played global(CHAN_VOICE) on the entire map
void Projectile::Touch( Event *ev )

Fixed: Borg adapting to batleth, melee and other damage types they should not
AdaptiveArmor::AdaptiveArmor()

Fixed: falsely returning true if checked entity does not exist 
qboolean EntityIsValidTarget( const Entity *ent )

Fixed: Denied taunt being played if a player gets killed and other player picks the item up
void AwardSystem::pickedupItem( Player *player, MultiplayerItemType itemType, const char *itemName )

Fixed: holdable mine beeping if owner or player from same team is standing on it
bool HoldableItemExplosive::isPlayerInRange( const Vector &position, float maxDistance )

Fixed: Trigger Hurt can be activated by pressing USE 
CLASS_DECLARATION( TriggerUse, TriggerHurt, "trigger_hurt" )

Fixed: Player can change model when dead, death animation replaying
void MultiplayerManager::changePlayerModel( Player *player, const char *modelName, bool force )

Fixed: crash if level does not have a bomb item in mp_gametype 3
int ModifierDiffusion::getStat( Player *player, int statNum, int value )

Fixed: error: '...' was not declared in this scope
extern void L_ShutdownEvents();
extern void L_InitEvents();
extern void L_UnarchiveEvents(Archiver& arc);
extern void L_ArchiveEvents(Archiver& arc);
extern void L_ProcessPendingEvents();
extern void L_ClearEventList();
dlls/game/g_main.cpp
dlls/game/level.cpp
dlls/game/listener.cpp

Fixed: error: 'CreateBeam' was not declared in this scope
void DoBeamAttack::_createBeam( Actor &self )

Fixed: error: 'CreateBeam' was not declared in this scope
BehaviorReturnCode_t	ShockDown::Evaluate

Fixed: error: 'CreateBeam' was not declared in this scope
BehaviorReturnCode_t	MultiShock::Evaluate

Fixed: error: 'CreateBeam' was not declared in this scope
BehaviorReturnCode_t	Shock::Evaluate

Fixed: error: 'CreateBeam' was not declared in this scope
BehaviorReturnCode_t	ShockWater::Evaluate

Fixed: error: 'CreateBeam' was not declared in this scope
dlls/game/beam.h

Fixed: client 0 access and error
Fixed: cannot convert 'bool' to 'HelperNode*'
HelperNode* HelperNode::FindClosestHelperNode( Actor &self , int mask , float maxDist , float minDistanceFromPlayer, bool unreserveCurrentNode )

Fixed: client 0 access and error
Fixed: cannot convert 'bool' to 'HelperNode*'
HelperNode* HelperNode::FindClosestHelperNodeThatCannotSeeEntity( Actor &self , int mask , unsigned int clipMask , float maxDist , float minDist , Entity *ent , float minDistFromPlayer )

Fixed: fatal error: vector.h: No such file or directory #include "vector.h"
Shared/qcommon/quaternion.h

Fixed: error: friend declaration of 'FuncBeam* CreateBeam(...)' specifies default arguments and isn't a definition [-fpermissive]
class FuncBeam : public ScriptSlave

Fixed: error: specializing member *Container<...>::Archive' requires 'template<>' syntax
inline void Container<str>::Archive
inline void Container<Vector>::Archive
inline void Container<int>::Archive
inline void Container<float>::Archive
inline void Container<Class*>::Archive
inline void Container<Class>::Archive
inline void Container<Entity*>::Archive
inline void Container<EntityPtr>::Archive

Fixed: error: declaration of template parameter 'T' shadows template parameter
inline void SafePtrBase::InitSafePtr

Fixed: error: 'gi' was not declared in this scope 
dlls/game/container.h
extern game_import_t gi;

Fixed: extra qualification 'UseData::' on member 'UseData'[-fpermissive] 
class UseData : public Class

Fixed: cinematic accessing client 0 only and always 
void G_StartCinematic( void )

Fixed: cinematic accessing client 0 only and always
void G_StopCinematic( void )

Fixed: uninitialized variable
qboolean SV_FilterPacket( const char *from )

Fixed: Callvote allowing g_gametype but should be mp_gametype
Fixed: Added File exist check for nextmap
void MultiplayerManager::callVote( Player *player, const str &command, const str &arg )

Fixed: strcpy-param-overlap and Stack Buffer Overflow 
extern "C" void G_ClientUserinfoChanged( gentity_t *ent, const char *userinfo )

Fixed: strcpy-param-overlap
void Info_RemoveKey (char *s, const char *key)