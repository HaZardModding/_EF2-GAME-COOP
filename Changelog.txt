Added: File to provide a bridge between the general game code and elite force 2 specific code
bool gameFix_inMultiplayer();
bool gamefix_isSpectator_stef2(Entity* ent);
bool gameFix_isDead(Entity* ent);
bool gameFix_isDedicatedServer();
bool gameFix_isListenServer();
bool gameFix_isWindowsServer();
bool gameFix_isLinuxServer();
void gameFix_hudPrint(Player* player, str sText);

Fixed Server Commands regarding the IP-Bann List: addip, removeip, listip, writeip

Added: G_ServerCommand returning bool if command was recognized
void G_ServerCommand( void ) -> bool G_ServerCommand( void )

Added: addip info print out that IP was added to bann list
void SVCmd_AddIP_f( void )

Disabled: Unknown server command, print out, we handle it as chat text anyway
void G_ServerCommand( void )

Changed: Server commands no longer using sv prefix before command
void SVCmd_AddIP_f( void )
void SVCmd_RemoveIP_f( void )
void SVCmd_WriteIP_f( void )
bool G_ServerCommand( void 

Added: removeip command printing out the IP that was removed
void SVCmd_RemoveIP_f( void )

Added: Printout of Number of banned IPs in list
void SVCmd_ListIP_f( void )

Fixed: Writing of banned IP-List to a file
void SVCmd_WriteIP_f( void )

Disabled: Fakk2 relic, secret thread
TriggerSecret::TriggerSecret()

Added: info_player_start Singleplayer Spawn being used if no other is found on a map - allows to spawn on Singleplayer maps
void ModeDeathmatch::respawnPlayer( Player *player )
void ModeDeathmatch::AddPlayer( Player *player )
void ModeTeamBase::addPlayerToTeam( Player *player, Team *team )
void ModeTeamBase::respawnPlayer( Player *player )
bool HoldableItemTransporter::use( void )

Added: Function used to check if entity is inside boundingbox of other-entity
bool gamefix_checkEntityInsideOfEntity(Entity* eCheck, Entity* eTheBox)

Fixed: trigger_volume_callvolume targetname not being cleared from Player when leaving trigger
Changed: Code moved down to avoid possible conflicts when trigger targetname is cleared - chrissstrahl
TriggerCallVolume::EntityLeftVolume

Added: Print out on triggerEntity command failure for feedback
void CThread::TriggerEntityEvent( Event *ev )

Fixed: Crash if given entity did not exist - triggerEntity script command
void CThread::TriggerEntityEvent( Event *ev )

Fixed: Crash if client 0 does not exist
void Actor::SpawnItems( void )

Added: Multiplayer compatibility for Camera Fov
void Camera::SetFOV( float fov, float time )

Fixed: Crash if Client 0 is missing while Camera Fov is set
void Camera::SetFOV( float fov, float time )

Fixed: sv_maxclient > 1 having a impact on script console commands in Singleplayer
qboolean G_ProcessClientCommand( gentity_t *ent )

Added: Convince Feature to strip leading /,^ or \ from console commands
void G_ClientCommand( gentity_t *ent )

Added: Check if it is a valid server command, because it would otherwise print out commands send to server at G_ProcessClientCommand
qboolean	G_ConsoleCommand( void )

Fixed: Savegames getting created during Multiplayer
qboolean G_ArchiveLevel( const char *filename, qboolean autosave, qboolean loading )

Added: Print out to all player huds/chat in multiplayer if trigger_secret is triggered
void TriggerSecret::FoundSecret( Event *ev )

Fixed: Crash in multiplayer if client 0 is not present and trigger_secret is triggered
void TriggerSecret::FoundSecret( Event *ev )

Fixed: Activator not being set on entry event for trigger_EntryAndExit
void TriggerEntryAndExit::TriggerStuff( Event *ev )

Added: Make player view from the current camera during cinematic, when just entering or switching around
void G_StopCinematic( void )
void SetCamera( Entity* ent, float switchTime )
void CThread::CuePlayer( Event *ev )
class MultiplayerManager : public Class
MultiplayerManager::MultiplayerManager()
void MultiplayerManager::cleanup( qboolean restart )
void MultiplayerManager::playerEnterArena( int entnum, float health )
void MultiplayerManager::makePlayerSpectator( Player *player, SpectatorTypes spectatorType, bool byChoice )

Fixed: First map in the map list repeating on linux servers
str MultiplayerManager::getNextMap( void )

Fixed: Dynamic lights appearing off if they have switched on before the player was in game
MultiplayerManager::MultiplayerManager()
void MultiplayerManager::addPlayer( Player *player )
void MultiplayerManager::cleanup( qboolean restart )
void World::UpdateDynamicLights( void )

Added: GAMEFIX identification string printout with Compile date
extern "C" void G_InitGame( int startTime, int randomSeed )

Added: Disallowed Playername "server"
extern "C" void G_ClientUserinfoChanged( gentity_t *ent, const char *userinfo )

Fixed: MP-Taunt Cooldown, the variable was there but nothing was implemented
qboolean G_TauntCmd( const gentity_t *ent )

Added: Turn OFF LEVEL AI if server empty, prevent issues with ai - turns on if player connects
extern "C" void G_ClientDisconnect( gentity_t *ent )
extern "C" const char *G_ClientConnect( int clientNum, qboolean firstTime, qboolean isBot, qboolean checkPassword )

Fixed: Bad null terminator
void ParseMapName( const char *fullName, char *mapName, char *spawnposName, char *movieName )

Fixed: Crash if a error is thrown before a level is loadad -> returns nullptr on failure
Player *GetPlayer( int index )

Added: Multiplayer handling for StopDialog
void Actor::StopDialog()

Fixed: Crash if $actor.attack($entity) is used but $entity does not exist
void Actor::AttackEntity( Event *ev	)

Added: Print info of mission failure to player huds
void G_FinishMissionFailed( void )

Fixed: Crash if client 0 does not exist
void G_FinishMissionFailed( void )

Fixed: Crash if owner does not exist
void SplinePath::SetPrev( SplinePath *node )

Fixed: crash after success screen is done, if no map key is set on trigger_changelevel in singleplayer
void G_ExitLevel( void )

Fixed: Missing .c_str()
void G_BeginIntermission( const char *map )

Fixed: trigger_hurt crash if activating entity was just deleted in this frame
void TriggerHurt::Hurt( Event *ev )

Fixed: trigger_hurt only hurting the activator, even when multiple players/actors are inside the triggerfield
void TriggerHurt::Hurt( Event *ev )

Added: Cap on integer digit length to prevent crash and set correct return type
void CThread::GetIntegerFromString( Event *ev )

Added: Automatic loading of localstrings for each map (if not set in leveldefs.txt)
Example file location: loc/deu/stringresource/mapname.loc AND loc/eng/stringresource/mapname.loc
void Level::loadLevelStrings( void )

Added: Player Taunts not playing during cinematic
qboolean G_TauntCmd( const gentity_t *ent )

Added: Made Message print out multiplayer compatible if activator is a camera
void Trigger::ActivateTargets( Event *ev )

Added: Print out of (key)Message to of activating player hud for multiplayer
void Trigger::ActivateTargets( Event *ev )

Added: Print out of (key)Message to hud for multiplayer
void Trigger::ActivateTargets( Event *ev )

Changed: importance of (key)Message to high
void Trigger::ActivateTargets( Event *ev )

Added: Print Message to hud in multiplayer
Door::TryOpen

Fixed: game. variable cut off by one letter
void CThread::SetFloatVar( Event *ev )
void CThread::SetVectorVar( Event *ev )
void CThread::SetStringVar( Event *ev )
void CThread::RemoveVariable( Event* ev )
void CThread::GetFloatVar( Event *ev )
void CThread::GetVectorVar( Event *ev )
void CThread::GetStringVar( Event *ev )
void CThread::doesVarExist( Event *ev )

Fixed: Basher crashing linux server when rotating, on windows sometimes Basher was randomly doing several 180 turns
RotateToEntity::RotateToEntity()

Fixed: game. Variables where cut off by one letter when set or read or checked, they still did "work"
void CThread::GetFloatVar( Event *ev )
void CThread::GetVectorVar( Event *ev )
void CThread::GetStringVar( Event *ev )
void CThread::SetFloatVar( Event *ev )
void CThread::SetVectorVar( Event *ev )
void CThread::SetStringVar( Event *ev )
void CThread::RemoveVariable( Event* ev )
void CThread::doesVarExist( Event *ev )

Added: info printouts to hud/chat for multiplayer
void Trigger::TriggerStuff( Event *ev )

Added: info printouts to hud/chat for multiplayer
Door::TryOpen( Event *ev )


Fixed: Dispenser checking distance for all players not just client 0
void Dispenser::Think( void )

Added: check if item exists in game for puzzleobject
void PuzzleObject::useEvent(Event* event)

Fixed: Puzzleobject checking distance for all players not just client 0
void PuzzleObject::Think( void )

Fixed: Kill not always working under various conditions
void Player::Kill( Event *ev )

Fixed: kill working during cinematic/spectator or if already dead
void Player::Kill( Event *ev )

Changed: Importance from normal to critical
void CThread::CPrint( Event *ev )
CThread::CenterPrint( Event *ev )

Fixed: show to all players not just client 0
void CThread::CPrint( Event *ev )

Fixed: printouts working on one OS but not the other windows/linux 
extern "C" void G_CleanupGame( qboolean restart )
extern "C" void G_ShutdownGame( void )
extern "C" void G_InitGame( int startTime, int randomSeed )
void CThread::Print( Event *ev )
void CThread::PrintInt( Event *ev )
void CThread::PrintFloat( Event *ev )
void CThread::PrintVector( Event *ev )
void CThread::NewLine( Event *ev )

Fixed: checking players by their class to prevent issues if player get re-targetnamed
void DamageModifierTargetName::resolveDamage(Damage &damage)

Fixed: mp_bigGunMode also applying in singleplayer 
void Weapon::AttachGun( weaponhand_t hand, qboolean holstering )

Changed: changed error message to spell out the object type 
void SelectSpawnPoint( Vector &org, Vector &ang, str &thread )

Fixed: Server rejecting players with a password set, when the server it self has currently no password set
extern "C" const char *G_ClientConnect

Fixed: crash when using fakeplayer script command in multiplayer
void CThread::FakePlayer( Event *ev )
void CThread::RemoveFakePlayer( Event *ev )
void Player::StartFakePlayer( void )
void Player::FakePlayer( qboolean holster )
void Player::RemoveFakePlayer( void )

Fixed: chrash if entity does not exist
CThread::SendClientCommand( Event *ev )

Fixed: chrash if entity does not exist
void CThread::GetNumFreeReliableServerCommands( Event* ev )

Fixed: Bat'leth / Batleth stabbing sound being played global(CHAN_VOICE) on the entire map
void Projectile::Touch( Event *ev )

Fixed: Borg adapting to batleth, melee and other damage types they should not
AdaptiveArmor::AdaptiveArmor()

Fixed: falsely returning true if checked entity does not exist 
qboolean EntityIsValidTarget( const Entity *ent )

Fixed: Denied taunt being played if a player gets killed and other player picks the item up
void AwardSystem::pickedupItem( Player *player, MultiplayerItemType itemType, const char *itemName )

Fixed: holdable mine beeping if owner or player from same team is standing on it
bool HoldableItemExplosive::isPlayerInRange( const Vector &position, float maxDistance )

Fixed: Trigger Hurt can be activated by pressing USE 
CLASS_DECLARATION( TriggerUse, TriggerHurt, "trigger_hurt" )

Fixed: Player can change model when dead, death animation replaying
void MultiplayerManager::changePlayerModel( Player *player, const char *modelName, bool force )

Fixed: crash if level does not have a bomb item in mp_gametype 3
int ModifierDiffusion::getStat( Player *player, int statNum, int value )

Fixed: error: '...' was not declared in this scope
extern void L_ShutdownEvents();
extern void L_InitEvents();
extern void L_UnarchiveEvents(Archiver& arc);
extern void L_ArchiveEvents(Archiver& arc);
extern void L_ProcessPendingEvents();
extern void L_ClearEventList();
dlls/game/g_main.cpp
dlls/game/level.cpp
dlls/game/listener.cpp

Fixed: error: 'CreateBeam' was not declared in this scope
void DoBeamAttack::_createBeam( Actor &self )

Fixed: error: 'CreateBeam' was not declared in this scope
BehaviorReturnCode_t	ShockDown::Evaluate

Fixed: error: 'CreateBeam' was not declared in this scope
BehaviorReturnCode_t	MultiShock::Evaluate

Fixed: error: 'CreateBeam' was not declared in this scope
BehaviorReturnCode_t	Shock::Evaluate

Fixed: error: 'CreateBeam' was not declared in this scope
BehaviorReturnCode_t	ShockWater::Evaluate

Fixed: error: 'CreateBeam' was not declared in this scope
dlls/game/beam.h

Fixed: client 0 access and error
Fixed: cannot convert 'bool' to 'HelperNode*'
HelperNode* HelperNode::FindClosestHelperNode( Actor &self , int mask , float maxDist , float minDistanceFromPlayer, bool unreserveCurrentNode )

Fixed: client 0 access and error
Fixed: cannot convert 'bool' to 'HelperNode*'
HelperNode* HelperNode::FindClosestHelperNodeThatCannotSeeEntity( Actor &self , int mask , unsigned int clipMask , float maxDist , float minDist , Entity *ent , float minDistFromPlayer )

Fixed: fatal error: vector.h: No such file or directory #include "vector.h"
Shared/qcommon/quaternion.h

Fixed: error: friend declaration of 'FuncBeam* CreateBeam(...)' specifies default arguments and isn't a definition [-fpermissive]
class FuncBeam : public ScriptSlave

Fixed: error: specializing member *Container<...>::Archive' requires 'template<>' syntax
inline void Container<str>::Archive
inline void Container<Vector>::Archive
inline void Container<int>::Archive
inline void Container<float>::Archive
inline void Container<Class*>::Archive
inline void Container<Class>::Archive
inline void Container<Entity*>::Archive
inline void Container<EntityPtr>::Archive

Fixed: error: declaration of template parameter 'T' shadows template parameter
inline void SafePtrBase::InitSafePtr

Fixed: error: 'gi' was not declared in this scope 
dlls/game/container.h
extern game_import_t gi;

Fixed: extra qualification 'UseData::' on member 'UseData'[-fpermissive] 
class UseData : public Class

Fixed: cinematic accessing client 0 only and always 
void G_StartCinematic( void )

Fixed: cinematic accessing client 0 only and always
void G_StopCinematic( void )

Fixed: uninitialized variable
qboolean SV_FilterPacket( const char *from )

Fixed: Callvote allowing g_gametype but should be mp_gametype
Fixed: Added File exist check for nextmap
void MultiplayerManager::callVote( Player *player, const str &command, const str &arg )

Fixed: strcpy-param-overlap and Stack Buffer Overflow 
extern "C" void G_ClientUserinfoChanged( gentity_t *ent, const char *userinfo )

Fixed: strcpy-param-overlap
void Info_RemoveKey (char *s, const char *key)